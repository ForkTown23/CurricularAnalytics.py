AbstractCourse[Course(845919019, Dict(3703527048 => 1), "Computer Programming for Engineering Applications", 3, "ECE ", "175", "", "", "", Course[], "", Dict{Int64, Requisite}(), LearningOutcome[LearningOutcome(2844747886, Dict(3703527048 => 5), "Conceptualize engineering problems as computational problems", "L1_task", 3, Dict{Int64, Requisite}(), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(2870274653, Dict(3703527048 => 6), "Design computer programs using modular programming", "L2_task", 3, Dict{Int64, Requisite}(2844747886 => pre), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(2477073309, Dict(3703527048 => 7), "Understand the basics of data structures", "L3_task", 3, Dict{Int64, Requisite}(2844747886 => pre), #undef, Dict{String, Any}(), Dict{String, Any}())], Dict{String, Any}(), Dict{String, Any}(), 0.5), Course(1911794559, Dict(3703527048 => 2), "Elements of Electrical Engineering", 3, "ECE", "207", "", "", "", Course[], "", Dict{Int64, Requisite}(845919019 => pre), LearningOutcome[LearningOutcome(2772285370, Dict(3703527048 => 8), "Solve a resistive network that is excited by an AC or a DC source", "L4_task", 3, Dict{Int64, Requisite}(), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(3654933964, Dict(3703527048 => 9), "Solve first-order circuits involving resistors and a capacitor or an inductor", "L5_task", 3, Dict{Int64, Requisite}(2772285370 => pre), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(156209124, Dict(3703527048 => 10), "Derive the complex impedance associated with a resistive, inductive and capacitive load", "L6_task", 3, Dict{Int64, Requisite}(2772285370 => pre), #undef, Dict{String, Any}(), Dict{String, Any}())], Dict{String, Any}(), Dict{String, Any}(), 0.5), Course(2010259130, Dict(3703527048 => 3), "Basic Circuits", 3, "ECE", "220", "", "", "", Course[], "", Dict{Int64, Requisite}(845919019 => pre), LearningOutcome[LearningOutcome(3218201686, Dict(3703527048 => 11), "Apply knowledge of mathematics, science and engineering", "L7_task", 3, Dict{Int64, Requisite}(), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(461822860, Dict(3703527048 => 12), "Design and conduct experiments, as well as analyze and interpret data", "L8_task", 3, Dict{Int64, Requisite}(3218201686 => pre), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(4232721754, Dict(3703527048 => 13), "Identify, formulate and solve engineering problems", "L9_task", 3, Dict{Int64, Requisite}(3218201686 => pre), #undef, Dict{String, Any}(), Dict{String, Any}())], Dict{String, Any}(), Dict{String, Any}(), 0.5), Course(2067869212, Dict(3703527048 => 4), "Digital Logic", 3, "ECE", "274A", "", "", "", Course[], "", Dict{Int64, Requisite}(1911794559 => pre), LearningOutcome[LearningOutcome(230119902, Dict(3703527048 => 14), "Know how to construct basic gates (inverter, AND, OR) using NMOS and PMOS switches", "L10_task", 3, Dict{Int64, Requisite}(), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(3051588996, Dict(3703527048 => 15), "Know the cause of delays associated with logic gates", "L11_task", 3, Dict{Int64, Requisite}(230119902 => pre), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(449571439, Dict(3703527048 => 16), "Know number representations in different bases, and methods for converting from one base to another", "L12_task", 3, Dict{Int64, Requisite}(230119902 => pre), #undef, Dict{String, Any}(), Dict{String, Any}())], Dict{String, Any}(), Dict{String, Any}(), 0.5)]
LearningOutcome[LearningOutcome(2844747886, Dict(3703527048 => 5), "Conceptualize engineering problems as computational problems", "L1_task", 3, Dict{Int64, Requisite}(), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(2870274653, Dict(3703527048 => 6), "Design computer programs using modular programming", "L2_task", 3, Dict{Int64, Requisite}(2844747886 => pre), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(2477073309, Dict(3703527048 => 7), "Understand the basics of data structures", "L3_task", 3, Dict{Int64, Requisite}(2844747886 => pre), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(2772285370, Dict(3703527048 => 8), "Solve a resistive network that is excited by an AC or a DC source", "L4_task", 3, Dict{Int64, Requisite}(), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(3654933964, Dict(3703527048 => 9), "Solve first-order circuits involving resistors and a capacitor or an inductor", "L5_task", 3, Dict{Int64, Requisite}(2772285370 => pre), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(156209124, Dict(3703527048 => 10), "Derive the complex impedance associated with a resistive, inductive and capacitive load", "L6_task", 3, Dict{Int64, Requisite}(2772285370 => pre), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(3218201686, Dict(3703527048 => 11), "Apply knowledge of mathematics, science and engineering", "L7_task", 3, Dict{Int64, Requisite}(), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(461822860, Dict(3703527048 => 12), "Design and conduct experiments, as well as analyze and interpret data", "L8_task", 3, Dict{Int64, Requisite}(3218201686 => pre), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(4232721754, Dict(3703527048 => 13), "Identify, formulate and solve engineering problems", "L9_task", 3, Dict{Int64, Requisite}(3218201686 => pre), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(230119902, Dict(3703527048 => 14), "Know how to construct basic gates (inverter, AND, OR) using NMOS and PMOS switches", "L10_task", 3, Dict{Int64, Requisite}(), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(3051588996, Dict(3703527048 => 15), "Know the cause of delays associated with logic gates", "L11_task", 3, Dict{Int64, Requisite}(230119902 => pre), #undef, Dict{String, Any}(), Dict{String, Any}()), LearningOutcome(449571439, Dict(3703527048 => 16), "Know number representations in different bases, and methods for converting from one base to another", "L12_task", 3, Dict{Int64, Requisite}(230119902 => pre), #undef, Dict{String, Any}(), Dict{String, Any}())]
Graphs.SimpleGraphs.SimpleDiGraph{Int64}(3, [[2, 3], [4], Int64[], Int64[]], [Int64[], [1], [1], [2]])
Curriculum Example Curricula c1 is valid
  delay factor = (11.0, [3.0, 3.0, 2.0, 3.0])
  blocking factor = (4, [3, 1, 0, 0])
  centrality factor = (3, [0, 3, 0, 0])
  curricular complexity = (15.0, Number[6.0, 4.0, 2.0, 3.0])
Dict{String, Any}("total credit hours" => 12, "avg. credits per term" => 4.0, "min. credits in a term" => 3, "term credit hour std. dev." => 1.4142135623730951, "number of terms" => 3, "max. credits in a term" => 6, "min. credit term" => 1, "max. credit term" => 2)